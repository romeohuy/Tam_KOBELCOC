@using Composite.Core.Routing
@using Composite.Data.DynamicTypes
@using Composite.Search.SimplePageSearch
@inherits RazorFunction
@functions {
    public override string FunctionDescription
    {
        get { return "Search results rendering"; }
    }

    [FunctionParameter(Label = "Show Search Form", Help = "If checked, a search form will be shown above the search result.", DefaultValue = "true")]
    public bool ShowSearchForm { get; set; }

    [FunctionParameter(Label = "Search Form Button Label", Help = "The text to show on the search form submit button. When left blank a generic search icon is used.", DefaultValue = "")]
    public string SearchButtonLabel { get; set; }

    [FunctionParameter(Label = "Results Per Page", Help = "The maximum number of results to show at a time. If the search contains more results links will be provided to navigate results.", DefaultValue = "10")]
    public int PageSize { get; set; }

    [FunctionParameter(Label = "Search Current Site Only", Help = "If checked only the current site will be searched. Uncheck to search all subsites.", DefaultValue = "true")]
    public bool CurrentSite { get; set; }

    [FunctionParameter(Label = "Show Highlights", Help = "If checked search results will have highlights (when available) shown below the title.", DefaultValue = "false")]
    public bool ShowDescriptions { get; set; }

    [FunctionParameter(Label = "No Results Message", Help = "The text to display when there are no results found.")]
    public XhtmlDocument NoResultsMessage { get; set; }

    [FunctionParameter(Label = "Data Types", DefaultValue = null,
    Help = "Allows limiting the search results to the given data types.",
    WidgetFactoryMethod = "SearchableDataTypeSelector")]
    public IEnumerable<string> DataTypes { get; set; }

    SimpleSearchResult _searchResult;

    private int TotalCount;

    public static WidgetFunctionProvider SearchableDataTypeSelector()
    {
        Expression<Func<object>> expression = () => GetSearchableDataTypeOptions();
        var method = (expression.Body as MethodCallExpression).Method;

        return StandardWidgetFunctions.DropDownList(method.DeclaringType, method.Name, "Item1", "Item2", true, false);
    }


    public static Tuple<string, string>[] GetSearchableDataTypeOptions()
    {
        var result = new List<Tuple<string, string>>();

        var dataTypes = DataFacade.GetAllInterfaces().Where(type =>
            type.GetCustomAttributes(typeof(SearchableTypeAttribute), false).Length > 0
            && InternalUrls.DataTypeSupported(type)).ToList();

        dataTypes.Add(typeof(IPage));
        dataTypes.Add(typeof(IMediaFile));

        foreach (var dataType in dataTypes)
        {
            var descriptor = DynamicTypeManager.GetDataTypeDescriptor(dataType);
            result.Add(new Tuple<string, string>(
                dataType.FullName,
                descriptor.Title ?? dataType.Name));
        }

        return result.OrderBy(r => r.Item2).ToArray();
    }

    private int PageNumber
    {
        get
        {
            int page;
            return int.TryParse(Request["p"], out page) && page >= 1 ? page : 1;
        }
    }

    protected int TotalPages
    {
        get { return (int)Math.Ceiling((decimal)_searchResult.ResultsFound / PageSize); }
    }
}

@{

    var searchQuery = Request.QueryString["q"] ?? string.Empty;

    if (!string.IsNullOrWhiteSpace(searchQuery) && searchQuery.Length > 1)
    {
        // Tokenize
        searchQuery = searchQuery.Trim().ToLower();
        string[] keywords = searchQuery.Split(new[] {' '}, StringSplitOptions.RemoveEmptyEntries);

        var knowTypes = DataFacade.GetAllInterfaces().ToDictionary(t => t.FullName);

        Type[] dataTypes = DataTypes != null
            ? DataTypes.Select(name => knowTypes[name]).ToArray()
            : null;

        _searchResult = SimpleSearchFacade.Search(new SimpleSearchQuery
        {
            Culture = Data.CurrentLocale,
            Keywords = keywords,
            DataTypes = dataTypes,
            CurrentSiteOnly = CurrentSite,
            PageNumber = PageNumber - 1,
            PageSize = PageSize
        });

        TotalCount = _searchResult.Entries.Where(f => f.Title != "Search" && f.Title != "Page Not Found").Count();
    }
    else
    {
        _searchResult = new SimpleSearchResult();
    }
}

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.composite.net/ns/function/1.0">
<head>
</head>
<body>
    <div class="simplepagesearch clearfix">
        @if (ShowSearchForm)
        {
            <div class="clearfix">
                @Html.C1().Function("Composite.Search.SimplePageSearch.SearchForm", 
									new { SearchResultPage = new DataReference<IPage>(CurrentPageNode.Id),
										  SearchButtonLabel = SearchButtonLabel})
            </div>
            if (!string.IsNullOrWhiteSpace(searchQuery)) { <hr/> }
        }
        @if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            @*<p>
                @Html.Raw(string.Format(Resources.SimplePageSearch.SearchResults_TotalCount, _searchResult.ResultsFound, Server.HtmlEncode(searchQuery)))
            </p>*@
	}
        <ol class="simplepagesearch-results" start="@(PageSize*(PageNumber-1)+1)">
            @foreach (var entry in _searchResult.Entries)
            {
                <li>
                    <a href="@entry.Url">
                        @Html.Raw(entry.Title.Replace("&", "&amp;"))
                    </a>
					@if (ShowDescriptions && !string.IsNullOrEmpty(entry.Description))
					{
						<br />
						@Html.Raw(entry.Description)
					}
                </li>
            }
        </ol>
        @if (TotalPages > 1)
        {
            <ul class="pagination">
                @for (int i = 1; i <= TotalPages; i++)
                {
                    if (i == PageNumber)
                    {
                        <li class="active"><span>@i</span></li>
                    }
                    else
                    {
                        <li><a href="?p=@i&amp;q=@searchQuery">@i</a></li>
                    }
                }
            </ul>
        } else if (TotalCount == 0)
        {
            <div class="no-results">
                @Markup(NoResultsMessage)
            </div>
        }
    </div>
</body>
</html>